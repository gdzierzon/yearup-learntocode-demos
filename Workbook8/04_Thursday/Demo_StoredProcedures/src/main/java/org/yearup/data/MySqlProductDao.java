package org.yearup.data;

import org.yearup.models.Product;

import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySqlProductDao implements ProductDao
{
    private DataSource dataSource;

    public MySqlProductDao(DataSource dataSource)
    {
        this.dataSource = dataSource;
    }


    @Override
    public List<Product> listByCategory(int categoryId)
    {
        List<Product> products = new ArrayList<>();

        String sql = "CALL ProductsByCategoryId(?);";

        try(Connection connection = dataSource.getConnection();
            CallableStatement statement = connection.prepareCall(sql)
        )
        {
            statement.setInt(1, categoryId);

            ResultSet row = statement.executeQuery();

            // use WHILE when you expect multiple rows
            while (row.next())
            {
                Product product = mapRow(row);
                products.add(product);
            }

        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }

        return products;
    }

    @Override
    public Product getById(int productId)
    {
        String sql = """
                SELECT *
                FROM products
                WHERE productId = ?;
                """;

        try(Connection connection = dataSource.getConnection();
            PreparedStatement statement = connection.prepareStatement(sql)
        )
        {
            statement.setInt(1, productId);

            ResultSet row = statement.executeQuery();

            // use IF when you expect only a single row
            if (row.next())
            {
                Product product = mapRow(row);

                return product;
            }

        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }

        return null;
    }

    @Override
    public Product create(Product product)
    {
        String sql = "CALL ProductsInsert(?,?,?,?,?,?,?,?,?);";

        try (
                Connection connection = dataSource.getConnection();
                CallableStatement statement = connection.prepareCall(sql)
        )
        {
            statement.setString(1, product.getName());
            statement.setInt(2, product.getSupplierId());
            statement.setInt(3, product.getCategoryId());
            statement.setString(4, product.getDescription());
            statement.setBigDecimal(5, product.getPrice());
            statement.setInt(6, product.getUnitsInStock());
            statement.setInt(7, product.getUnitsOnOrder());
            statement.setInt(8, product.getReorderLevel());
            statement.setBoolean(9, product.isDiscontinued());

            statement.execute();

            // auto incremented keys are returned in a ResultSet
            ResultSet key = statement.getResultSet();
            if(key.next())
            {
                // get the first (and only) column value
                // this is the new productId - that was generated by the db
                int productId = key.getInt(1);
                return getById(productId);
            }

        }
        catch (SQLException ex)
        {
            System.out.println(ex.getMessage());
        }

        return null;
    }

    @Override
    public void update(int productId, Product product)
    {

        String sql = """
                UPDATE products
                SET ProductName = ?
                    , UnitPrice = ?
                    , CategoryID = ?
                WHERE productId = ?;
                """;
        try (
                Connection connection = dataSource.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)
        )
        {
            statement.setString(1, product.getName());
            statement.setBigDecimal(2, product.getPrice());
            statement.setInt(3, product.getCategoryId());
            statement.setInt(4, productId);

            statement.executeUpdate();

        }
        catch (SQLException ex)
        {

        }
    }

    @Override
    public void delete(int productId)
    {

        String sql = """
                DELETE FROM products
                WHERE productId = ?;
                """;
        try (
                Connection connection = dataSource.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql)
        )
        {
            statement.setInt(1, productId);

            statement.executeUpdate();

        }
        catch (SQLException ex)
        {

        }
    }

    public Product mapRow(ResultSet row) throws SQLException
    {
        int id = row.getInt("ProductId");
        String name = row.getString("ProductName");
        int supplierId = row.getInt("SupplierId");
        int categoryId = row.getInt("CategoryId");
        String description = row.getString("QuantityPerUnit");
        BigDecimal price = row.getBigDecimal("UnitPrice");
        int unitsInStock = row.getInt("UnitsInStock");
        int unitsOnOrder = row.getInt("UnitsOnOrder");
        int reorderLevel = row.getInt("ReorderLevel");
        boolean isDiscontinued = row.getBoolean("Discontinued");

        Product product = new Product()
        {{
            setId(id);
            setName(name);
            if(supplierId > 0) setSupplierId(supplierId);
            setCategoryId(categoryId);
            setDescription(description);
            setPrice(price);
            setUnitsInStock(unitsInStock);
            setUnitsOnOrder(unitsOnOrder);
            setReorderLevel(reorderLevel);
            setDiscontinued(isDiscontinued);
        }};

        return product;
    }
}
